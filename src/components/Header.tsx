import { useState, useEffect } from 'react';
import { NavLink, Link, useNavigate } from 'react-router-dom';
import { supabase } from '../supabaseClient';
import type { Session } from '@supabase/supabase-js';
import {
  Navbar, NavBody, NavItems, MobileNav, NavbarLogo, NavbarButton,
  MobileNavHeader, MobileNavToggle, MobileNavMenu
} from './ui/resizable-navbar';

export const Header = () => {
  const [session, setSession] = useState<Session | null>(null);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    supabase.auth.getSession().then(({ data: { session } }) => setSession(session));
    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session);
    });
    return () => subscription.unsubscribe();
  }, []);

  const handleLogout = async () => {
    await supabase.auth.signOut({ scope: "local" });
    navigate("/");
  };

  const navItems = [
    { name: "Home", link: "/" },
    { name: "About", link: "/about" },
    { name: "My Blog", link: "/blog" },
    { name: "Contact", link: "/contact" },
  ];
  if (session) {
    navItems.push({ name: "Dashboard", link: "/admin" });
  }

  const closeMobileMenu = () => setIsMobileMenuOpen(false);

  return (
    <Navbar>
      <NavBody>
        <NavbarLogo />


































































































































































































































































































































































































































































































































































































































































































































































































        <NavItems items={navItems} />
        <div className="flex items-center gap-3">
          {session ? (
            <NavbarButton onClick={handleLogout} variant="secondary">Logout</NavbarButton>
          ) : (
            <Link to="/login"><NavbarButton variant="primary">Login</NavbarButton></Link>
          )}
        </div>
      </NavBody>

      {/* --- Navigasi Mobile --- */}
      <MobileNav>
        <MobileNavHeader>
          <NavbarLogo />
          <div className="flex items-center gap-4">
            <MobileNavToggle
              isOpen={isMobileMenuOpen}
              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
            />
          </div>
        </MobileNavHeader>
        <MobileNavMenu isOpen={isMobileMenuOpen}>
          {navItems.map((item, idx) => (
            <NavLink
              key={`mobile-link-${idx}`}
              to={item.link}
              onClick={closeMobileMenu}
              className="block py-2 text-slate-700 dark:text-slate-200"
            >
              {item.name}
            </NavLink>
          ))}
          <div className="flex w-full flex-col gap-4 pt-4 mt-2 border-t border-rose-100 dark:border-slate-700">
            {session ? (
              <NavbarButton onClick={() => { handleLogout(); closeMobileMenu(); }} variant="secondary" className="w-full">Logout</NavbarButton>
            ) : (
              <Link to="/login" className="w-full"><NavbarButton onClick={closeMobileMenu} variant="primary" className="w-full">Login</NavbarButton></Link>
            )}
          </div>
        </MobileNavMenu>
      </MobileNav>
    </Navbar>
  );
};